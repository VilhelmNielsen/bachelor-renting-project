# source: https://eu1.prisma.sh/sebastian-vilhelm-nielsen-e462bc/bachelor/dev
# timestamp: Fri Dec 21 2018 12:15:17 GMT+0100 (Central European Standard Time)

type AggregateBooking {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateItemReview {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateRating {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserReview {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Booking implements Node {
  id: ID!
  item: Item!
  booker: User!
  startDate: DateTime!
  endDate: DateTime!
  status: BookingStatus!
}

"""A connection to a list of items."""
type BookingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  startDate: DateTime!
  endDate: DateTime!
  status: BookingStatus
  item: ItemCreateOneWithoutBookingsInput!
  booker: UserCreateOneWithoutBookingsInput!
}

input BookingCreateManyWithoutBookerInput {
  create: [BookingCreateWithoutBookerInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutItemInput {
  create: [BookingCreateWithoutItemInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutBookerInput {
  startDate: DateTime!
  endDate: DateTime!
  status: BookingStatus
  item: ItemCreateOneWithoutBookingsInput!
}

input BookingCreateWithoutItemInput {
  startDate: DateTime!
  endDate: DateTime!
  status: BookingStatus
  booker: UserCreateOneWithoutBookingsInput!
}

"""An edge in a connection."""
type BookingEdge {
  """The item at the end of the edge."""
  node: Booking!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookingPreviousValues {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  status: BookingStatus!
}

input BookingScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  status: BookingStatus

  """All values that are not equal to given value."""
  status_not: BookingStatus

  """All values that are contained in given list."""
  status_in: [BookingStatus!]

  """All values that are not contained in given list."""
  status_not_in: [BookingStatus!]
}

enum BookingStatus {
  PENDING
  APPROVED
  DENIED
  CANCELLED
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
}

input BookingUpdateInput {
  startDate: DateTime
  endDate: DateTime
  status: BookingStatus
  item: ItemUpdateOneRequiredWithoutBookingsInput
  booker: UserUpdateOneRequiredWithoutBookingsInput
}

input BookingUpdateManyDataInput {
  startDate: DateTime
  endDate: DateTime
  status: BookingStatus
}

input BookingUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
  status: BookingStatus
}

input BookingUpdateManyWithoutBookerInput {
  create: [BookingCreateWithoutBookerInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutBookerInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingScalarWhereInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutBookerInput!]
}

input BookingUpdateManyWithoutItemInput {
  create: [BookingCreateWithoutItemInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutItemInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingScalarWhereInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutItemInput!]
}

input BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyDataInput!
}

input BookingUpdateWithoutBookerDataInput {
  startDate: DateTime
  endDate: DateTime
  status: BookingStatus
  item: ItemUpdateOneRequiredWithoutBookingsInput
}

input BookingUpdateWithoutItemDataInput {
  startDate: DateTime
  endDate: DateTime
  status: BookingStatus
  booker: UserUpdateOneRequiredWithoutBookingsInput
}

input BookingUpdateWithWhereUniqueWithoutBookerInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutBookerDataInput!
}

input BookingUpdateWithWhereUniqueWithoutItemInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutItemDataInput!
}

input BookingUpsertWithWhereUniqueWithoutBookerInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutBookerDataInput!
  create: BookingCreateWithoutBookerInput!
}

input BookingUpsertWithWhereUniqueWithoutItemInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutItemDataInput!
  create: BookingCreateWithoutItemInput!
}

input BookingWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  status: BookingStatus

  """All values that are not equal to given value."""
  status_not: BookingStatus

  """All values that are contained in given list."""
  status_in: [BookingStatus!]

  """All values that are not contained in given list."""
  status_not_in: [BookingStatus!]
  item: ItemWhereInput
  booker: UserWhereInput
}

input BookingWhereUniqueInput {
  id: ID
}

type Category implements Node {
  id: ID!
  title: String!
  slug: String!
  description: String
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  title: String!
  slug: String!
  description: String
  items: ItemCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutItemsInput {
  create: CategoryCreateWithoutItemsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutItemsInput {
  title: String!
  slug: String!
  description: String
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  title: String!
  slug: String!
  description: String
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  title: String
  slug: String
  description: String
  items: ItemUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  title: String
  slug: String
  description: String
}

input CategoryUpdateOneRequiredWithoutItemsInput {
  create: CategoryCreateWithoutItemsInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutItemsDataInput
  upsert: CategoryUpsertWithoutItemsInput
}

input CategoryUpdateWithoutItemsDataInput {
  title: String
  slug: String
  description: String
}

input CategoryUpsertWithoutItemsInput {
  update: CategoryUpdateWithoutItemsDataInput!
  create: CategoryCreateWithoutItemsInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

scalar DateTime

type Item implements Node {
  id: ID!
  title: String!
  description: String!
  owner: User!
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  reviews(where: ItemReviewWhereInput, orderBy: ItemReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemReview!]
  price: Int!
  maxDuration: Int
  category: Category!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  title: String!
  description: String!
  price: Int!
  maxDuration: Int
  owner: UserCreateOneWithoutItemsInput!
  bookings: BookingCreateManyWithoutItemInput
  reviews: ItemReviewCreateManyWithoutItemInput
  category: CategoryCreateOneWithoutItemsInput!
}

input ItemCreateManyWithoutCategoryInput {
  create: [ItemCreateWithoutCategoryInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateManyWithoutOwnerInput {
  create: [ItemCreateWithoutOwnerInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateOneWithoutBookingsInput {
  create: ItemCreateWithoutBookingsInput
  connect: ItemWhereUniqueInput
}

input ItemCreateOneWithoutReviewsInput {
  create: ItemCreateWithoutReviewsInput
  connect: ItemWhereUniqueInput
}

input ItemCreateWithoutBookingsInput {
  title: String!
  description: String!
  price: Int!
  maxDuration: Int
  owner: UserCreateOneWithoutItemsInput!
  reviews: ItemReviewCreateManyWithoutItemInput
  category: CategoryCreateOneWithoutItemsInput!
}

input ItemCreateWithoutCategoryInput {
  title: String!
  description: String!
  price: Int!
  maxDuration: Int
  owner: UserCreateOneWithoutItemsInput!
  bookings: BookingCreateManyWithoutItemInput
  reviews: ItemReviewCreateManyWithoutItemInput
}

input ItemCreateWithoutOwnerInput {
  title: String!
  description: String!
  price: Int!
  maxDuration: Int
  bookings: BookingCreateManyWithoutItemInput
  reviews: ItemReviewCreateManyWithoutItemInput
  category: CategoryCreateOneWithoutItemsInput!
}

input ItemCreateWithoutReviewsInput {
  title: String!
  description: String!
  price: Int!
  maxDuration: Int
  owner: UserCreateOneWithoutItemsInput!
  bookings: BookingCreateManyWithoutItemInput
  category: CategoryCreateOneWithoutItemsInput!
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  maxDuration_ASC
  maxDuration_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  description: String!
  price: Int!
  maxDuration: Int
}

type ItemReview implements Node {
  id: ID!
  rating: Rating!
  item: Item!
  reviewer: User
}

"""A connection to a list of items."""
type ItemReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemReviewEdge]!
  aggregate: AggregateItemReview!
}

input ItemReviewCreateInput {
  rating: RatingCreateOneInput!
  item: ItemCreateOneWithoutReviewsInput!
  reviewer: UserCreateOneInput
}

input ItemReviewCreateManyWithoutItemInput {
  create: [ItemReviewCreateWithoutItemInput!]
  connect: [ItemReviewWhereUniqueInput!]
}

input ItemReviewCreateWithoutItemInput {
  rating: RatingCreateOneInput!
  reviewer: UserCreateOneInput
}

"""An edge in a connection."""
type ItemReviewEdge {
  """The item at the end of the edge."""
  node: ItemReview!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemReviewOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ItemReviewPreviousValues {
  id: ID!
}

input ItemReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type ItemReviewSubscriptionPayload {
  mutation: MutationType!
  node: ItemReview
  updatedFields: [String!]
  previousValues: ItemReviewPreviousValues
}

input ItemReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemReviewWhereInput
}

input ItemReviewUpdateInput {
  rating: RatingUpdateOneRequiredInput
  item: ItemUpdateOneRequiredWithoutReviewsInput
  reviewer: UserUpdateOneInput
}

input ItemReviewUpdateManyWithoutItemInput {
  create: [ItemReviewCreateWithoutItemInput!]
  connect: [ItemReviewWhereUniqueInput!]
  disconnect: [ItemReviewWhereUniqueInput!]
  delete: [ItemReviewWhereUniqueInput!]
  update: [ItemReviewUpdateWithWhereUniqueWithoutItemInput!]
  deleteMany: [ItemReviewScalarWhereInput!]
  upsert: [ItemReviewUpsertWithWhereUniqueWithoutItemInput!]
}

input ItemReviewUpdateWithoutItemDataInput {
  rating: RatingUpdateOneRequiredInput
  reviewer: UserUpdateOneInput
}

input ItemReviewUpdateWithWhereUniqueWithoutItemInput {
  where: ItemReviewWhereUniqueInput!
  data: ItemReviewUpdateWithoutItemDataInput!
}

input ItemReviewUpsertWithWhereUniqueWithoutItemInput {
  where: ItemReviewWhereUniqueInput!
  update: ItemReviewUpdateWithoutItemDataInput!
  create: ItemReviewCreateWithoutItemInput!
}

input ItemReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rating: RatingWhereInput
  item: ItemWhereInput
  reviewer: UserWhereInput
}

input ItemReviewWhereUniqueInput {
  id: ID
}

input ItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  maxDuration: Int

  """All values that are not equal to given value."""
  maxDuration_not: Int

  """All values that are contained in given list."""
  maxDuration_in: [Int!]

  """All values that are not contained in given list."""
  maxDuration_not_in: [Int!]

  """All values less than the given value."""
  maxDuration_lt: Int

  """All values less than or equal the given value."""
  maxDuration_lte: Int

  """All values greater than the given value."""
  maxDuration_gt: Int

  """All values greater than or equal the given value."""
  maxDuration_gte: Int
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateInput {
  title: String
  description: String
  price: Int
  maxDuration: Int
  owner: UserUpdateOneRequiredWithoutItemsInput
  bookings: BookingUpdateManyWithoutItemInput
  reviews: ItemReviewUpdateManyWithoutItemInput
  category: CategoryUpdateOneRequiredWithoutItemsInput
}

input ItemUpdateManyDataInput {
  title: String
  description: String
  price: Int
  maxDuration: Int
}

input ItemUpdateManyMutationInput {
  title: String
  description: String
  price: Int
  maxDuration: Int
}

input ItemUpdateManyWithoutCategoryInput {
  create: [ItemCreateWithoutCategoryInput!]
  connect: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ItemUpdateManyWithoutOwnerInput {
  create: [ItemCreateWithoutOwnerInput!]
  connect: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateOneRequiredWithoutBookingsInput {
  create: ItemCreateWithoutBookingsInput
  connect: ItemWhereUniqueInput
  update: ItemUpdateWithoutBookingsDataInput
  upsert: ItemUpsertWithoutBookingsInput
}

input ItemUpdateOneRequiredWithoutReviewsInput {
  create: ItemCreateWithoutReviewsInput
  connect: ItemWhereUniqueInput
  update: ItemUpdateWithoutReviewsDataInput
  upsert: ItemUpsertWithoutReviewsInput
}

input ItemUpdateWithoutBookingsDataInput {
  title: String
  description: String
  price: Int
  maxDuration: Int
  owner: UserUpdateOneRequiredWithoutItemsInput
  reviews: ItemReviewUpdateManyWithoutItemInput
  category: CategoryUpdateOneRequiredWithoutItemsInput
}

input ItemUpdateWithoutCategoryDataInput {
  title: String
  description: String
  price: Int
  maxDuration: Int
  owner: UserUpdateOneRequiredWithoutItemsInput
  bookings: BookingUpdateManyWithoutItemInput
  reviews: ItemReviewUpdateManyWithoutItemInput
}

input ItemUpdateWithoutOwnerDataInput {
  title: String
  description: String
  price: Int
  maxDuration: Int
  bookings: BookingUpdateManyWithoutItemInput
  reviews: ItemReviewUpdateManyWithoutItemInput
  category: CategoryUpdateOneRequiredWithoutItemsInput
}

input ItemUpdateWithoutReviewsDataInput {
  title: String
  description: String
  price: Int
  maxDuration: Int
  owner: UserUpdateOneRequiredWithoutItemsInput
  bookings: BookingUpdateManyWithoutItemInput
  category: CategoryUpdateOneRequiredWithoutItemsInput
}

input ItemUpdateWithWhereUniqueWithoutCategoryInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutCategoryDataInput!
}

input ItemUpdateWithWhereUniqueWithoutOwnerInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutOwnerDataInput!
}

input ItemUpsertWithoutBookingsInput {
  update: ItemUpdateWithoutBookingsDataInput!
  create: ItemCreateWithoutBookingsInput!
}

input ItemUpsertWithoutReviewsInput {
  update: ItemUpdateWithoutReviewsDataInput!
  create: ItemCreateWithoutReviewsInput!
}

input ItemUpsertWithWhereUniqueWithoutCategoryInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutCategoryDataInput!
  create: ItemCreateWithoutCategoryInput!
}

input ItemUpsertWithWhereUniqueWithoutOwnerInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutOwnerDataInput!
  create: ItemCreateWithoutOwnerInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  maxDuration: Int

  """All values that are not equal to given value."""
  maxDuration_not: Int

  """All values that are contained in given list."""
  maxDuration_in: [Int!]

  """All values that are not contained in given list."""
  maxDuration_not_in: [Int!]

  """All values less than the given value."""
  maxDuration_lt: Int

  """All values less than or equal the given value."""
  maxDuration_lte: Int

  """All values greater than the given value."""
  maxDuration_gt: Int

  """All values greater than or equal the given value."""
  maxDuration_gte: Int
  owner: UserWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  reviews_every: ItemReviewWhereInput
  reviews_some: ItemReviewWhereInput
  reviews_none: ItemReviewWhereInput
  category: CategoryWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

type Location implements Node {
  id: ID!
  city: String!
  country: String!
  lat: Float!
  lng: Float!
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  city: String!
  country: String!
  lat: Float!
  lng: Float!
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  city: String!
  country: String!
  lat: Float!
  lng: Float!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateDataInput {
  city: String
  country: String
  lat: Float
  lng: Float
}

input LocationUpdateInput {
  city: String
  country: String
  lat: Float
  lng: Float
}

input LocationUpdateManyMutationInput {
  city: String
  country: String
  lat: Float
  lng: Float
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lng: Float

  """All values that are not equal to given value."""
  lng_not: Float

  """All values that are contained in given list."""
  lng_in: [Float!]

  """All values that are not contained in given list."""
  lng_not_in: [Float!]

  """All values less than the given value."""
  lng_lt: Float

  """All values less than or equal the given value."""
  lng_lte: Float

  """All values greater than the given value."""
  lng_gt: Float

  """All values greater than or equal the given value."""
  lng_gte: Float
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createItem(data: ItemCreateInput!): Item!
  createBooking(data: BookingCreateInput!): Booking!
  createUserReview(data: UserReviewCreateInput!): UserReview!
  createItemReview(data: ItemReviewCreateInput!): ItemReview!
  createCategory(data: CategoryCreateInput!): Category!
  createLocation(data: LocationCreateInput!): Location!
  createRating(data: RatingCreateInput!): Rating!
  createUser(data: UserCreateInput!): User!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateUserReview(data: UserReviewUpdateInput!, where: UserReviewWhereUniqueInput!): UserReview
  updateItemReview(data: ItemReviewUpdateInput!, where: ItemReviewWhereUniqueInput!): ItemReview
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteUserReview(where: UserReviewWhereUniqueInput!): UserReview
  deleteItemReview(where: ItemReviewWhereUniqueInput!): ItemReview
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteUser(where: UserWhereUniqueInput!): User
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  upsertUserReview(where: UserReviewWhereUniqueInput!, create: UserReviewCreateInput!, update: UserReviewUpdateInput!): UserReview!
  upsertItemReview(where: ItemReviewWhereUniqueInput!, create: ItemReviewCreateInput!, update: ItemReviewUpdateInput!): ItemReview!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertRating(where: RatingWhereUniqueInput!, create: RatingCreateInput!, update: RatingUpdateInput!): Rating!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  updateManyRatings(data: RatingUpdateManyMutationInput!, where: RatingWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  deleteManyUserReviews(where: UserReviewWhereInput): BatchPayload!
  deleteManyItemReviews(where: ItemReviewWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyRatings(where: RatingWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  userReviews(where: UserReviewWhereInput, orderBy: UserReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserReview]!
  itemReviews(where: ItemReviewWhereInput, orderBy: ItemReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ItemReview]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  item(where: ItemWhereUniqueInput!): Item
  booking(where: BookingWhereUniqueInput!): Booking
  userReview(where: UserReviewWhereUniqueInput!): UserReview
  itemReview(where: ItemReviewWhereUniqueInput!): ItemReview
  category(where: CategoryWhereUniqueInput!): Category
  location(where: LocationWhereUniqueInput!): Location
  rating(where: RatingWhereUniqueInput!): Rating
  user(where: UserWhereUniqueInput!): User
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  userReviewsConnection(where: UserReviewWhereInput, orderBy: UserReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserReviewConnection!
  itemReviewsConnection(where: ItemReviewWhereInput, orderBy: ItemReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemReviewConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  ratingsConnection(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RatingConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Rating implements Node {
  id: ID!
  stars: Int!
  description: String
}

"""A connection to a list of items."""
type RatingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RatingEdge]!
  aggregate: AggregateRating!
}

input RatingCreateInput {
  stars: Int!
  description: String
}

input RatingCreateOneInput {
  create: RatingCreateInput
  connect: RatingWhereUniqueInput
}

"""An edge in a connection."""
type RatingEdge {
  """The item at the end of the edge."""
  node: Rating!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RatingOrderByInput {
  id_ASC
  id_DESC
  stars_ASC
  stars_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RatingPreviousValues {
  id: ID!
  stars: Int!
  description: String
}

type RatingSubscriptionPayload {
  mutation: MutationType!
  node: Rating
  updatedFields: [String!]
  previousValues: RatingPreviousValues
}

input RatingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RatingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RatingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RatingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RatingWhereInput
}

input RatingUpdateDataInput {
  stars: Int
  description: String
}

input RatingUpdateInput {
  stars: Int
  description: String
}

input RatingUpdateManyMutationInput {
  stars: Int
  description: String
}

input RatingUpdateOneRequiredInput {
  create: RatingCreateInput
  connect: RatingWhereUniqueInput
  update: RatingUpdateDataInput
  upsert: RatingUpsertNestedInput
}

input RatingUpsertNestedInput {
  update: RatingUpdateDataInput!
  create: RatingCreateInput!
}

input RatingWhereInput {
  """Logical AND on all given filters."""
  AND: [RatingWhereInput!]

  """Logical OR on all given filters."""
  OR: [RatingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RatingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input RatingWhereUniqueInput {
  id: ID
}

type Subscription {
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  userReview(where: UserReviewSubscriptionWhereInput): UserReviewSubscriptionPayload
  itemReview(where: ItemReviewSubscriptionWhereInput): ItemReviewSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  rating(where: RatingSubscriptionWhereInput): RatingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  location: Location
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  items: ItemCreateManyWithoutOwnerInput
  bookings: BookingCreateManyWithoutBookerInput
  location: LocationCreateOneInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBookingsInput {
  create: UserCreateWithoutBookingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutItemsInput {
  create: UserCreateWithoutItemsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookingsInput {
  name: String!
  email: String!
  password: String!
  items: ItemCreateManyWithoutOwnerInput
  location: LocationCreateOneInput
}

input UserCreateWithoutItemsInput {
  name: String!
  email: String!
  password: String!
  bookings: BookingCreateManyWithoutBookerInput
  location: LocationCreateOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserReview implements Node {
  id: ID!
  rating: Rating!
  user: User!
  reviewer: User!
}

"""A connection to a list of items."""
type UserReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserReviewEdge]!
  aggregate: AggregateUserReview!
}

input UserReviewCreateInput {
  rating: RatingCreateOneInput!
  user: UserCreateOneInput!
  reviewer: UserCreateOneInput!
}

"""An edge in a connection."""
type UserReviewEdge {
  """The item at the end of the edge."""
  node: UserReview!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserReviewOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserReviewPreviousValues {
  id: ID!
}

type UserReviewSubscriptionPayload {
  mutation: MutationType!
  node: UserReview
  updatedFields: [String!]
  previousValues: UserReviewPreviousValues
}

input UserReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserReviewWhereInput
}

input UserReviewUpdateInput {
  rating: RatingUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  reviewer: UserUpdateOneRequiredInput
}

input UserReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [UserReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rating: RatingWhereInput
  user: UserWhereInput
  reviewer: UserWhereInput
}

input UserReviewWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  items: ItemUpdateManyWithoutOwnerInput
  bookings: BookingUpdateManyWithoutBookerInput
  location: LocationUpdateOneInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  items: ItemUpdateManyWithoutOwnerInput
  bookings: BookingUpdateManyWithoutBookerInput
  location: LocationUpdateOneInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutBookingsInput {
  create: UserCreateWithoutBookingsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBookingsDataInput
  upsert: UserUpsertWithoutBookingsInput
}

input UserUpdateOneRequiredWithoutItemsInput {
  create: UserCreateWithoutItemsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutItemsDataInput
  upsert: UserUpsertWithoutItemsInput
}

input UserUpdateWithoutBookingsDataInput {
  name: String
  email: String
  password: String
  items: ItemUpdateManyWithoutOwnerInput
  location: LocationUpdateOneInput
}

input UserUpdateWithoutItemsDataInput {
  name: String
  email: String
  password: String
  bookings: BookingUpdateManyWithoutBookerInput
  location: LocationUpdateOneInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBookingsInput {
  update: UserUpdateWithoutBookingsDataInput!
  create: UserCreateWithoutBookingsInput!
}

input UserUpsertWithoutItemsInput {
  update: UserUpdateWithoutItemsDataInput!
  create: UserCreateWithoutItemsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  location: LocationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
